/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.5.1/samples
 */
plugins {
  id 'org.springframework.boot' version '3.0.0-SNAPSHOT'
  id 'io.spring.dependency-management' version '1.0.14.RELEASE'
  id 'com.github.node-gradle.node' version '3.4.0'
  id 'java'
}

group = 'in.alqaholic'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
  maven { url 'https://repo.spring.io/milestone' }
  maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  // implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
  implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'io.projectreactor:reactor-test'
}

task setupPreCommit(type: Exec) {
  final String osName = System.getProperty('os.name').toLowerCase()
  if (osName.contains('windows')) {
    commandLine 'cmd', '/c', 'pre-commit install'
  }
  else {
    commandLine 'pre-commit install'
  }
}

build.dependsOn setupPreCommit

tasks.named('bootRun') {
  systemProperty 'spring.profiles.active', findProperty('profile') ?: 'dev'
}

def buildTask = tasks.register('buildWebapp', YarnTask) {
  dependsOn(yarn)
  args = ['build']
  inputs.dir(fileTree('src/main/ts').exclude('**/*.test.(j|t)sx?').exclude('**/*.spec.(j|t)sx?').exclude('**/__tests__/**/*.(j|t)sx?'))
  inputs.dir('node_modules')
  // inputs.dir("public")
  outputs.dir("${buildDir}/ts")
// environment = ["BUILD_PATH": "${buildDir}/webapp/webroot"]
}

tasks.named('test') {
  useJUnitPlatform()
}

sourceSets {
  java {
    main {
      resources {
        // This makes the processResources task automatically depend on the buildWebapp one
        srcDir(buildTask)
      }
    }
  }
}
