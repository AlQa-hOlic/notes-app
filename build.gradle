/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.5.1/samples
 */
plugins {
  id 'org.springframework.boot' version '3.0.0-SNAPSHOT'
  id 'io.spring.dependency-management' version '1.0.14.RELEASE'
  id 'java'
}

group = 'in.alqaholic'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
  maven { url 'https://repo.spring.io/milestone' }
  maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

  implementation 'org.flywaydb:flyway-core'
  implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
  implementation 'org.springframework:spring-jdbc'
  runtimeOnly 'io.r2dbc:r2dbc-h2'
  runtimeOnly 'com.h2database:h2'

  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'io.projectreactor:reactor-test'
}

task setupPreCommit(type: Exec) {
  final String osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    commandLine 'cmd', '/c', 'pre-commit install'
  }
  else {
    commandLine 'pre-commit install'
  }
}

build.dependsOn setupPreCommit

tasks.named('test') {
  useJUnitPlatform()
}
